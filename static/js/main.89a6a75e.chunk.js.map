{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","id","username","TodoInfo","todo","selectedUser","usersFromServer","find","userId","classNames","completed","title","TodoList","todos","map","App","useState","todosFromServer","todosToShow","setTodosToShow","todoTitle","setTodoTitle","selectedUserId","setSelectedUserId","hasTitleErr","setHasTitleErr","hasUserErr","setHasUserErr","createIdForTodo","max","forEach","onSubmit","event","preventDefault","trimmedTitle","trim","newTodo","currTodos","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89a6a75e.chunk.js","sourcesContent":["import { User } from '../../react-app-env';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n  >\n    {user.name}\n  </a>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo, User } from '../../react-app-env';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const selectedUser: User | null = usersFromServer.find(\n    user => (user.id === todo.userId),\n  ) || null;\n\n  return (\n    <li\n      className={classNames(\n        'TodoInfo', { 'TodoInfo--completed': todo.completed },\n      )}\n      data-id={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {selectedUser\n        && <UserInfo user={selectedUser} />}\n    </li>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </ul>\n);\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { Todo } from './react-app-env';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App: React.FC = () => {\n  const [todosToShow, setTodosToShow] = useState<Todo[]>(todosFromServer);\n\n  const [todoTitle, setTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const [hasTitleErr, setHasTitleErr] = useState(false);\n  const [hasUserErr, setHasUserErr] = useState(false);\n\n  const clearForm = () => {\n    setSelectedUserId(0);\n    setTodoTitle('');\n  };\n\n  const createIdForTodo = () => {\n    let max = 0;\n\n    todosToShow.forEach(todo => {\n      if (todo.id > max) {\n        max = todo.id;\n      }\n    });\n\n    return max + 1;\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimmedTitle = todoTitle.trim();\n\n    if (!trimmedTitle) {\n      setHasTitleErr(true);\n    }\n\n    if (!selectedUserId) {\n      setHasUserErr(true);\n    }\n\n    if (trimmedTitle && selectedUserId) {\n      const newTodo = {\n        id: createIdForTodo(),\n        title: trimmedTitle,\n        completed: false,\n        userId: selectedUserId,\n      };\n\n      setTodosToShow(currTodos => ([...currTodos, newTodo]));\n      clearForm();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"todoTitle\">Title: </label>\n          <input\n            id=\"todoTitle\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={todoTitle}\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n              setHasTitleErr(false);\n            }}\n          />\n\n          {hasTitleErr\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelector\">User: </label>\n          <select\n            id=\"userSelector\"\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n              setHasUserErr(false);\n            }}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserErr\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosToShow} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}